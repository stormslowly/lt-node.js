{"version":3,"sources":["QrReader.js","App.js","reportWebVitals.js","index.js"],"names":["QrReader","config","props","fps","qrBox","aspectRatio","undefined","disableFlip","createConfig","this","verbose","qrCodeSuccessCallback","html5QrcodeScanner","Html5QrcodeScanner","render","qrCodeErrorCallback","clear","catch","error","console","id","React","Component","App","useWebSocket","readyState","sendMessage","onMessage","useCallback","mesg","log","className","ReadyState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mPACaA,EAAb,uKACI,WAmBI,IAAIC,EAjBJ,SAAsBC,GAClB,IAAID,EAAS,GAab,OAZIC,EAAMC,MACNF,EAAOE,IAAMD,EAAMC,KAEnBD,EAAME,QACNH,EAAOG,MAAQF,EAAME,OAErBF,EAAMG,cACNJ,EAAOI,YAAcH,EAAMG,kBAELC,IAAtBJ,EAAMK,cACNN,EAAOM,YAAcL,EAAMK,aAExBN,EAGEO,CAAaC,KAAKP,OAC3BQ,GAAiC,IAAvBD,KAAKP,MAAMQ,QAGzB,IAAMD,KAAKP,MAAMS,sBACb,KAAM,8CAIVF,KAAKG,mBAAqB,IAAIC,mBAC1B,sBAAuBZ,EAAQS,GACnCD,KAAKG,mBAAmBE,OACpBL,KAAKP,MAAMS,sBAAuBF,KAAKP,MAAMa,uBAhCzD,kCAmCI,WAGIN,KAAKG,mBAAmBI,QAAQC,OAAM,SAAAC,GAClCC,QAAQD,MAAM,uCAAwCA,QAvClE,oBA2CI,WACI,OAAO,qBAAKE,GAAI,4BA5CxB,GAA8BC,IAAMC,W,OC+BrBC,MA3Bf,WAAgB,IAAD,EAEyBC,YAAa,uBAAzCC,EAFG,EAEHA,WAAYC,EAFT,EAESA,YAEdC,EAAYC,uBAAY,SAACC,GAC3BV,QAAQW,IAAID,EAAoB,GAAdJ,EAAiBA,GAC/BC,EAAYG,KAGjB,CAACJ,EAAYC,IAEhB,OACI,sBAAKK,UAAU,MAAf,UAEI,4DACA,mCAAMC,IAAWP,GAAjB,MAAiCA,KACjC,cAAC,EAAD,CACItB,IAAK,GACLC,MAAO,IACPG,aAAa,EACbI,sBAAuBgB,EACvBZ,oBAAqB,mBCdtBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS5B,OACP,cAAC,IAAM6B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.111ba515.chunk.js","sourcesContent":["import React from \"react\";\nexport class QrReader extends React.Component {\n    componentDidMount() {\n        // Creates the configuration object for Html5QrcodeScanner.\n        function createConfig(props) {\n            var config = {};\n            if (props.fps) {\n                config.fps = props.fps;\n            }\n            if (props.qrBox) {\n                config.qrBox = props.qrBox;\n            }\n            if (props.aspectRatio) {\n                config.aspectRatio = props.aspectRatio;\n            }\n            if (props.disableFlip !== undefined) {\n                config.disableFlip = props.disableFlip;\n            }\n            return config;\n        }\n\n        var config = createConfig(this.props);\n        var verbose = this.props.verbose === true;\n\n        // Suceess callback is required.\n        if (!(this.props.qrCodeSuccessCallback)) {\n            throw 'qrCodeSuccessCallback is required callback.';\n        }\n\n        // eslint-disable-next-line no-undef\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\n            'qr-code-full-region', config, verbose);\n        this.html5QrcodeScanner.render(\n            this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n    }\n\n    componentWillUnmount() {\n        // TODO(mebjas): See if there is a better way to handle\n        //  promise in `componentWillUnmount`.\n        this.html5QrcodeScanner.clear().catch(error => {\n            console.error('Failed to clear html5QrcodeScanner. ', error);\n        });\n    }\n\n    render() {\n        return <div id={'qr-code-full-region'} />;\n    }\n}","import './App.css';\nimport { useCallback } from \"react\";\nimport { QrReader } from \"./QrReader\";\nimport useWebSocket, { ReadyState } from 'ahooks/es/useWebSocket'\n\nfunction App() {\n\n    const { readyState, sendMessage } = useWebSocket(\"ws://127.0.0.1:8080\");\n\n    const onMessage = useCallback((mesg) => {\n        console.log(mesg, readyState == 1 ,readyState);\n            sendMessage(mesg);\n        if (readyState == 1) {\n        }\n    }, [readyState, sendMessage]);\n\n    return (\n        <div className=\"App\">\n\n            <h1>Html5Qrcode React example!</h1>\n            <h2> {ReadyState[readyState]} - {readyState}</h2>\n            <QrReader\n                fps={10}\n                qrBox={250}\n                disableFlip={false}\n                qrCodeSuccessCallback={onMessage}\n                qrCodeErrorCallback={() => {\n                }} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}